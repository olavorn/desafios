// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.Models.EntityModel;

namespace api.Migrations
{
    [DbContext(typeof(apiContext))]
    partial class apiContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("api.Model.Instalment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AdvanceTax")
                        .HasColumnName("TaxaAntecipacao")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("AllInstallments");

                    b.Property<decimal>("Ammount")
                        .HasColumnName("ValorTotalParcela")
                        .HasColumnType("decimal(8,2)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("CriadoEm");

                    b.Property<Guid>("CustomerId")
                        .HasColumnName("IdCliente")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("FixedTax")
                        .HasColumnName("TaxaFixa")
                        .HasColumnType("decimal(8,2)");

                    b.Property<short>("Number")
                        .HasColumnName("NumParcela")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnName("DataPagamento")
                        .HasColumnType("datetime");

                    b.Property<long>("PaymentId")
                        .HasColumnName("IdPagamento")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("TargetDate")
                        .HasColumnName("DataAlvoPagamento")
                        .HasColumnType("datetime");

                    b.Property<short>("TotalOf")
                        .HasColumnName("NumTotalParcelas")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PaymentId");

                    b.ToTable("Parcela");
                });

            modelBuilder.Entity("api.Model.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("AdvanceId");

                    b.Property<long?>("AdvanceId1");

                    b.Property<decimal>("Amount")
                        .HasColumnName("Valor")
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("CardDigits");

                    b.Property<string>("CardExpirationDate")
                        .HasColumnName("ExpiracaoCartao")
                        .HasColumnType("varchar(7)");

                    b.Property<short>("CardLastDigits")
                        .HasColumnName("DigitosCartao")
                        .HasColumnType("smallint");

                    b.Property<string>("CardName")
                        .HasColumnName("NomeCartao")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CardSecurityNumber");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasColumnName("DataPagamento");

                    b.Property<Guid>("CustomerId")
                        .HasColumnName("IdCliente")
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("InstalmentsCount");

                    b.Property<int>("OperatorResponse")
                        .HasColumnName("ConfirmacaoAdquirente");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnName("DataRepasse");

                    b.Property<int>("Result");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("AdvanceId");

                    b.HasIndex("AdvanceId1");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PaidAt");

                    b.ToTable("Pagamento");
                });

            modelBuilder.Entity("api.Models.EntityModel.Advance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AdvanceDue")
                        .HasColumnName("TotalRepasse")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("AdvanceTaxes");

                    b.Property<Guid>("CustomerId");

                    b.Property<Guid?>("EvaluationBy")
                        .HasColumnName("AvaliadoPor");

                    b.Property<DateTime?>("EvaluationDateEnd")
                        .IsRequired()
                        .HasColumnName("DataPagamentoFim");

                    b.Property<DateTime?>("EvaluationDateStart")
                        .IsRequired()
                        .HasColumnName("DataPagamentoInicio");

                    b.Property<decimal>("FixedTaxes");

                    b.Property<decimal>("GrossAmount")
                        .HasColumnName("Valor")
                        .HasColumnType("decimal(8,2)");

                    b.Property<bool?>("IsApproved")
                        .HasColumnName("DataRepasse");

                    b.Property<decimal>("NetAmount");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnName("DataRequisicao")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EvaluationDateEnd");

                    b.HasIndex("RequestDate");

                    b.HasIndex("UserId");

                    b.ToTable("Adiantamento");
                });

            modelBuilder.Entity("api.Models.EntityModel.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("Email")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsActive")
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Nome")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Cliente");
                });

            modelBuilder.Entity("api.Models.EntityModel.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("api.Model.Instalment", b =>
                {
                    b.HasOne("api.Models.EntityModel.Customer", "Customer")
                        .WithMany("Instalments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("api.Model.Payment", "Payment")
                        .WithMany("Instalments")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("api.Model.Payment", b =>
                {
                    b.HasOne("api.Models.EntityModel.Advance")
                        .WithMany("Payments")
                        .HasForeignKey("AdvanceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("api.Models.EntityModel.Advance", "Advance")
                        .WithMany()
                        .HasForeignKey("AdvanceId1");

                    b.HasOne("api.Models.EntityModel.Customer", "Customer")
                        .WithMany("Payments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("api.Models.EntityModel.Advance", b =>
                {
                    b.HasOne("api.Models.EntityModel.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("api.Models.EntityModel.User")
                        .WithMany("Advances")
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
